@using System.Web.Script.Serialization
@model BackOfficeRAM.ViewModels.CreateEditRoteiroViewModel



<div class="form-horizontal">
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @if (Model.Roteiro != null)
    {
        @Html.HiddenFor(model => model.Roteiro.Id)
    }
    <br />
    <div class="form-group">

        <div class="col-md-6">
            @Html.Label("Nome")
            @Html.EditorFor(model => model.Roteiro.Nome, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
            @Html.ValidationMessageFor(model => model.Roteiro.Nome, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.Label("Descrição", htmlAttributes: new { @class = "control-label col-md-5" })
        <div class="col-md-12">
            @Html.TextAreaFor(model => model.Roteiro.Descricao, 5, 1, new { @class = "form-control", @required = "required" })
            @Html.ValidationMessageFor(model => model.Roteiro.Descricao, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-12">
            <div class="form-group">
                @Html.Label("Pontos do Roteiro", htmlAttributes: new { @class = "control-label col-md-12" })
                <div class="form-row">
                    <div class="col-md-5">
                        <select class="form-control" id="listaPontos" data-bind="value: IdPonto">
                            @if (Model.Pontos != null)
                            {
                                foreach (var item in Model.Pontos)
                                {
                                    <option value="@item.Id">@item.Nome</option>
                                }

                            }
                        </select>
                    </div>
                    <div class="col-md-4">
                        <button class="btn btn-success" data-bind="click: adicionarPonto" type="button">Adicionar</button>
                    </div>
                </div>
            </div>


            <div style="vertical-align:top;background-color:cadetblue;color:white !important;width:51%">
                <!-- mostra a tabela se tiver pelo menos um ponto ja adicionado -->
                <table class="table" data-bind="visible: ListaPontos().length > 0">
                    <thead style="color:white;">
                        <tr style="border-top: 0">
                            <th style="width:10px">
                            </th>
                            <th><b>Ponto</b></th>
                            <th style="width:100px"></th>
                        </tr>
                    </thead>
                    <!-- percorre a lista de pontos. desenha um TR por cara ponto -->
                    <tbody id="sortable" data-bind="foreach: ListaPontos" style="color:white;cursor:ns-resize">
                        <tr class="ui-state-default">
                            <td>
                                <i class="fas fa-arrows-alt-v">
                            </td>
                            <td data-bind="text: NomePonto"><i class="fas fa-arrows-alt-v"></i></td>
                            <td>
                                <!-- cria hiddens para guardar os pontos escolhidos e mandar no post para o controller -->
                                <!-- $index() -> dá a iteração atual do ciclo: "0","1","2"... -->
                                <input type="hidden" class="posicao" data-bind="value: $index, attr:{name: 'PontosSeleccionados['+$index()+'].Posicao'}" />
                                <input type="hidden" data-bind="value: IdPonto, attr:{name: 'PontosSeleccionados['+$index()+'].IdPonto'}" />

                                <!-- click para remover um ponto. $root é para ir pesquisar o evento no modelo base -->
                                <button class="btn btn-warning" data-bind="click: $root.removerPonto" type="button">Remover</button>
                            </td>
                        </tr>
                    </tbody>
                </table>

            </div>


        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Guardar" class="btn btn-primary" />
            <a class="btn btn-outline-primary" href="@Url.Action("Index")">Voltar</a>
        </div>
    </div>
</div>



<script>


    //Modelo que representa a relação entre um roteiro e um ponto.
    var RoteiroPonto = function (id, nome) {
        var self = this;
        self.IdPonto = ko.observable(id);
        self.NomePonto = ko.observable(nome);
    };
    var Model = function () {
        var self = this;
        self.ListaPontos = ko.observableArray([]);
        self.IdPonto = ko.observable(); //ponto escolhido pelo user
        //retorna um Ponto por nome
        self.getPontoByName = function (nomePonto) {
            return ko.utils.arrayFirst(self.ListaPontos(), function (item) {
                return item.NomePonto() === nomePonto;
            });
        };
        //adiciona um Ponto ao roteiro
        self.adicionarPonto = function () {
            var nomePonto = $("#listaPontos").find('option:selected').text();
            var verifExiste = self.getPontoByName(nomePonto);
            if (verifExiste !== undefined) {
                alert("O ponto de interesse com o nome '" + nomePonto + "' ja foi adicionado a este roteiro");
            }
            else if (nomePonto == "") {
                alert("Não foi selecionado um ponto de interesse.");
            }
            else {
                self.ListaPontos.push(new RoteiroPonto(self.IdPonto(), nomePonto));
                self.IdPonto(undefined);
            }
        };
        //remove um Ponto do roteiro
        self.removerPonto = function (roteiroPonto) {
            self.ListaPontos.remove(roteiroPonto);
        };


        //carrega os pontos que o roteiro ja tem
        self.loadPontos = function () {
                var json = @Html.Raw(new JavaScriptSerializer().Serialize(Model.PontosGuardados));

                if (json == null || json.length === 0)
                return;

                var arr = [];
                $.each(json, function (index, ponto) {
                arr.push(new RoteiroPonto(ponto.IdPonto, ponto.Nome));
                });

                self.ListaPontos(arr);
                };

                self.loadPontos();
                }
                $(function () { //document.ready
                //Aplica o modelo KO à pagina
                ko.applyBindings(new Model());
                });
</script>